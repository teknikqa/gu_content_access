<?php

/**
 * Implements hook_menu_link_insert().
 */
function gu_content_access_menu_link_insert($link) {
  gu_content_access_menu_link_set_access($link);
}

/**
 * Implements hook_menu_link_update().
 */
function gu_content_access_menu_link_update($link) {
  gu_content_access_menu_link_set_access($link);
}

/**
 * Implements hook_node_insert().
 */
function gu_content_access_node_insert($node) {
  gu_content_access_node_set_access($node);
}

/**
 * Implements hook_menu_link_update().
 */
function gu_content_access_node_update($node) {
  gu_content_access_node_set_access($node);
}

/**
 * Helper finction to check if link is under eployees and set the needed permissions
 * @param unknown_type $link
 */
function gu_content_access_menu_link_set_access($link) {

  if($link['menu_name'] == 'menu-audience-menu' && $link['router_path'] == 'node/%') {
    // If we have a parent link ID, try to use that.
    $candidates = array();
    if (isset($link['plid'])) {
      $candidates[] = $link['plid'];
    }

    // Else, if we have a link hierarchy try to find a valid parent in there.
    if (!empty($link['depth']) && $link['depth'] > 1) {
      for ($depth = $link['depth'] - 1; $depth >= 1; $depth--) {
        $candidates[] = $link['p' . $depth];
      }
    }
    //check if links is a child of employees
    if(in_array(1161, $candidates)) {
      $path = explode('/', $link['link_path']);
      if(!empty($path[1])) {
        $node = node_load($path[1]);
        if($node->type == 'page') {

          $defaults = array();
          //get the current permissions on the node
          foreach (_content_access_get_operations() as $op => $label) {
            $defaults[$op] = content_access_per_node_setting($op, $node);
          }

          //make sure not to override any user defined settings
          $node_defaults = content_access_get_per_node_settings($node);
          if(empty($node_defaults)) {
            //remove view and view own from permissions array
            drupal_set_message(t('Content access granted on node.'));
            $defaults['view'] = array_values(array_diff($defaults['view'], array(1)));
            $defaults['view_own'] = array_values(array_diff($defaults['view_own'], array(1)));
            content_access_save_per_node_settings($node, $defaults);
            node_access_acquire_grants($node);
          }
        }
      }
    }
  }
}

function gu_content_access_node_set_access($node) {
  
  // Only for events.
  if($node->type == "event") {

    $defaults = array();
    //get the current permissions on the node
    foreach (_content_access_get_operations() as $op => $label) {
      $defaults[$op] = content_access_per_node_setting($op, $node);
    }
    // Check for intermal events.
    if($node->field_event_type['und'][0]['value'] == 1) {
      $defaults['view'] = array_values(array_diff($defaults['view'], array(1)));
      $defaults['view_own'] = array_values(array_diff($defaults['view_own'], array(1)));
      drupal_set_message(t('Only employess can view this event'));
    }
    else {
      if(!in_array($defaults['view'],1)) {
        $defaults['view'][] = 1;
      }
      if(!in_array($defaults['view_own'],1)) {
        $defaults['view_own'][] = 1;
      }
      drupal_set_message(t('Any one can view this event'));
    }

    // Save and rebuilt permssions.
    content_access_save_per_node_settings($node, $defaults);
    node_access_acquire_grants($node);
  }
}



/**
 * Implements hook_block_info().
 */
function gu_content_access_block_info() {
  $blocks['employee_search']['info'] = t('GUQ Employees search form');
  // Not worth caching.
  $blocks['employee_search']['cache'] = DRUPAL_NO_CACHE;
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function gu_content_access_block_view($delta = '') {
  switch ($delta) {
    case 'employee_search':
    $block['content'] = drupal_get_form('employee_search_block_form');
    return $block;
  }
}

/**
 * Implemenatation of hook_form
 */
function employee_search_block_form($form, &$form_state, $form_id) {
  $form['search'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#size' => 15,
    '#default_value' => '',
    '#attributes' => array('title' => t('Enter the terms you wish to search for.')),
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Search'));
  $form['#submit'][] = 'employee_search_block_form_submit';

  return $form;
}

/**
 * Process a block search form submission.
 */
function employee_search_block_form_submit($form, &$form_state) {
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  if ($form_state['values']['search'] == '') {
    form_set_error('keys', t('Please enter some keywords.'));
  }
  $form_state['redirect'] = 'employees/search/' . trim($form_state['values']['search']);

}